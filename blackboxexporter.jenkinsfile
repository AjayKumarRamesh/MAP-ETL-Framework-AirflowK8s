pipeline {
    agent { label 'taas_image' }

    stages {
        stage('Checkout MAP-ETL-Framework-AirflowK8s') {
            steps {
                git credentialsId: 'sangita_id_rsa' ,
                url: 'ssh://git@github.ibm.com/CIO-MAP/MAP-ETL-Framework-AirflowK8s.git', branch: 'master'
            } //steps
        } //stage

        stage('Prepare IBM Cloud CLI') {
            steps {
                sh('ibmcloud update -f -q')
                sh('ibmcloud plugin install container-registry -f -q')
                sh('ibmcloud plugin install container-service -f -q')
                sh('ibmcloud plugin list')
            }
        }

        stage('Build blackbox-exporter image') {
            environment {
                IBMCLOUD_CREDS = credentials('ibm-cloud-cr')
            }

            steps {
                sh('ibmcloud login --apikey ${IBMCLOUD_CREDS_PSW} -r us-south')
                sh('ibmcloud cr login')

                sh('docker build -t us.icr.io/map-dev-namespace/blackbox-exporter:${BUILD_NUMBER} -f DockerfileBlackbox .')

                //sh('docker push us.icr.io/map-dev-namespace/blackbox-exporter:${BUILD_NUMBER}')
                //sh('ibmcloud cr image-tag us.icr.io/map-dev-namespace/blackbox-exporter:${BUILD_NUMBER} us.icr.io/map-dev-namespace/blackbox-exporter:latest')
            } //steps
        } //stage

        stage('Sign and push blackbox-exporter image') {
            agent { label 'code-signing-agent' }
            environment {
                CERTIFICATE_ALIAS = 'IBMCodeSignCert1221'
                PUBLIC_KEY_FILE = "/tmp/${CERTIFICATE_ALIAS}-key.pub"
                PFX_FILE = credentials('signing-pfx-file')
                IBMCLOUD_CREDS = credentials('ibm-cloud-cr')
                IMAGE_BUILD_TAG="us.icr.io/map-dev-namespace/blackbox-exporter:${BUILD_NUMBER}"
                IMAGE_RELEASE_TAG="us.icr.io/map-dev-namespace/blackbox-exporter:signed"
            }
            steps {
                echo '\n=== Preparing the Environment for Image Signing ==='
                // Inject the PFX file to the required location
                echo '\nInjecting the PFX file...'
                sh '''
                chmod 644 ${PFX_FILE}
                sudo cp ${PFX_FILE} /etc/ekm
                '''

                // Configure local PGP keys for use in signing
                echo '\nConfigure local PGP keys for use in signing'
                sh '''
                    # Download local 'pointer keys' referencing the actual private and public keys stored in the HSM (Hardware Security Module)
                    sudo ucl pgp-key -n ${CERTIFICATE_ALIAS}
                    # Export our public key to be used for image verification
                    sudo gpg2 --armor --output ${PUBLIC_KEY_FILE} --export ${CERTIFICATE_ALIAS}
                '''

                // Signing and Publishing the Image
                echo '\n=== Signing and Publishing the Image ==='
                sh '''
                    docker images
                    FINGERPRINT=$(sudo gpg2 --no-tty --batch --fingerprint --with-colons "${CERTIFICATE_ALIAS}" | grep '^fpr' | cut -d : -f 10 | head -n 1)
                    LOCAL_DAEMON=$(echo ${DOCKER_HOST} | sed s/tcp/http/)
                    sudo skopeo copy \
                        --dest-creds iamapikey:${IBMCLOUD_CREDS_PSW} \
                        --remove-signatures \
                        --sign-by ${FINGERPRINT} \
                        --src-daemon-host "${LOCAL_DAEMON}" \
                        docker-daemon:${IMAGE_BUILD_TAG} \
                        docker://${IMAGE_RELEASE_TAG}
                '''
            } //steps
        } //stage

        stage('Deploy blackbox-exporter image to dev cluster') {
            when { equals expected: true, actual: Deploy }
            environment {
                IBMCLOUD_CREDS = credentials('ibm-cloud-cr')
            }

            steps {
                sh('ibmcloud login --apikey ${IBMCLOUD_CREDS_PSW} -r us-south')
                sh('ibmcloud ks cluster config --cluster map-dal10-16x64-01')
                sh('kubectl config current-context')
                script {
                   def CONFIG_DIFF = sh( script: 'kubectl diff -f monitoring/blackboxexporter.yml', returnStatus: true)
                   if (CONFIG_DIFF == 0) {
                      echo 'Restarting blackbox-exporter deployment'
                      sh('kubectl apply -f monitoring/blackboxexporter-config.yml')
                      sh('kubectl rollout restart deployment blackbox-exporter -n monitoring')
                   } else {
                      echo 'Applying blackbox-exporter deployment changes'
                      sh('kubectl apply -f monitoring/blackboxexporter-config.yml')
                      sh('kubectl apply -f monitoring/blackboxexporter.yml')
                   }
                } //script
            } //steps
         } //stage

    } //stages
    post {
        always {
            emailext to: 'bbotev@bg.ibm.com', 
                    subject: '${PROJECT_NAME} - Build # ${BUILD_NUMBER} - ${BUILD_STATUS}!',
                    body: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS: Check console output at $BUILD_URL to view the results.'

        } //always
    } //post
} //pipeline
