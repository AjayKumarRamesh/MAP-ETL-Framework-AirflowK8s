pipeline {
    agent { label 'kube_pod_slave' }
    options {
        ansiColor('xterm')
        timestamps ()
    }

    stages {
        stage('GitHub Checkout MAP-ETL-Framework-AirflowK8s Repo') {
            steps {
                git credentialsId: 'sangita_id_rsa' ,
                url: 'ssh://git@github.ibm.com/CIO-MAP/MAP-ETL-Framework-AirflowK8s.git', branch: 'master'
            } //steps
        } //stage

        stage("SonarQube Analysis") {
            environment{
                scannerBaseHome = "${HOME}/scannerBaseHome"
                SCANNER_HOME = "${scannerBaseHome}/sonar-scanner-4.7.0.2747-linux"
                SONAR_SCANNER_OPTS = "-Djavax.net.ssl.trustStore=${HOME}/cacerts -Djavax.net.ssl.trustStorePassword=changeit"
                SONAR_HOST_URL = "https://sms-sonarqube-intranet.dal1a.cirrus.ibm.com/"
                JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-amd64"
                PATH = "${JAVA_HOME}/bin/:${PATH}"
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'ibm_sonar_enterprise_cert', variable: 'FILE')]){
                        sh "keytool -importcert -keystore ${HOME}/cacerts -storepass changeit -file $FILE -alias 'ibm_sonar' -noprompt -trustcacerts"
                    }

                    def scannerHome = tool 'sonar-scanner';
                    withSonarQubeEnv('SonarQube'){
                        sh ("keytool -list -keystore ${HOME}/cacerts -storepass changeit")
                        sh ("${scannerHome}/bin/sonar-scanner -Dsonar.projectName=MAP-ETL-Framework-AirflowK8s -Dsonar.projectKey=MAP-ETL-Framework-AirflowK8s -Dsonar.exclusions='**/*.java, **/docs/**' -Dsonar.issuesReport.html.enable=true")
                    }

                    // Quality Gate Check
                    echo "Checking the Quality Gate"
                    def tries = 0
                    sonarResultStatus = "PENDING"
                    while ((sonarResultStatus == "PENDING" || sonarResultStatus == "IN_PROGRESS") && tries++ < 5) {
                        try {
                            timeout(time: 1, unit: 'MINUTES') {
                                sonarResult = waitForQualityGate abortPipeline: true
                                sonarResultStatus = sonarResult.status
                            }
                        } catch(ex) {
                            echo "caught exception ${ex}"
                        }
                        echo "waitForQualityGate status is ${sonarResultStatus} (tries=${tries})"
                    }
                    if (sonarResultStatus != 'OK') {
                        error "Quality gate failure for SonarQube: ${sonarResultStatus}"
                    }
                } //script
            } //steps
        } //satge


        stage('Prepare IBM Cloud CLI') {
            steps {
                sh('ibmcloud update -f -q')
                sh('ibmcloud plugin install container-registry -f -q')
                sh('ibmcloud plugin install container-service -f -q')
                sh('ibmcloud plugin list')
            }
        }

        stage('Build Airflow image') {
            environment {
                IBMCLOUD_CREDS = credentials('ibm-cloud-cr')
            }

            steps {
                sh('ibmcloud login --apikey ${IBMCLOUD_CREDS_PSW} -r us-south')
                sh('ibmcloud cr login')
                sh('docker build -t us.icr.io/map-dev-namespace/airflow:${BUILD_NUMBER} -f DockerfileAirflow .')
                sh('docker images')
                sh('docker push us.icr.io/map-dev-namespace/airflow:${BUILD_NUMBER}')
                sh('ibmcloud cr image-tag us.icr.io/map-dev-namespace/airflow:${BUILD_NUMBER} us.icr.io/map-dev-namespace/airflow:latest')
                sh('ibmcloud cr image-list --restrict map-dev-namespace')
            } //steps
        } //stage

#         stage('Deploy Airflow image to dev cluster') {
#            environment {
#                IBMCLOUD_CREDS = credentials('ibm-cloud-cr')
#            }

#            steps {
#                sh('ibmcloud login --apikey ${IBMCLOUD_CREDS_PSW} -r us-south')
#                sh('ibmcloud ks cluster config --cluster map-dal10-16x64-01')
#                sh('kubectl config current-context')
#                sh('kubectl rollout restart deployment airflow-webserver -n airflow')
#                sh('kubectl rollout restart deployment airflow-scheduler -n airflow')
#            } //steps
#         } //stage

#        stage('Validate Airflow on DEV') {
#            steps {
#                script {
#                    timeout(5) {
#                        waitUntil {
#                            try {
#                                sh('wget -q https://airflow.map-mktsys-dev.limited-use.ibm.com/airflow/login -O /dev/null')
#                                return true
#                            } 
#                            catch (exception) {
#                                return false
#                            }
#                        } //waitUntil
#                    } //timeout
#                } //script
#            } //steps
#        } //stage

    } //stages

    post {
        always {
            script{
                wrap([$class: 'BuildUser']) {
                    user_email = env.BUILD_USER_EMAIL
                    echo "${user_email}"
                }
            }
            emailext to: "bbotev@bg.ibm.com; ${user_email}",
                    subject: '${PROJECT_NAME} - Build # ${BUILD_NUMBER} - ${BUILD_STATUS}!',
                    body: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS: Check console output at $BUILD_URL to view the results.'

        } //always
    } //post
} //pipeline
