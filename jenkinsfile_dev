pipeline {
    agent any

    stages {
        stage('GitHub Checkout') {
            steps {
                git credentialsId: 'sangita_id_rsa' ,
                url: 'ssh://git@github.ibm.com/CIO-MAP/MAP-ETL-Framework-AirflowK8s.git', branch: 'master'
            } //steps
        } //stage

        stage('Prepare IBM Cloud CLI') {
            steps {
                sh('ibmcloud update -f -q')
                sh('ibmcloud plugin install container-registry -f -q')
                sh('ibmcloud plugin install container-service -f -q')
                sh('ibmcloud plugin list')
            }
        }

        stage('Build Airflow image') {
            environment {
                IBMCLOUD_CREDS = credentials('ibm-cloud-cr')
            }

            steps {
                sh('ibmcloud login --apikey ${IBMCLOUD_CREDS_PSW} -r us-south')
                sh('ibmcloud cr login')
                //Changes to enable StatsD metrics
                sh('cp -p airflow_conf/airflow.cfg airflow_conf/airflow.cfg.bak')
                sh('sed "s/statsd_on = False/statsd_on = True/g" airflow_conf/airflow.cfg.bak > airflow_conf/airflow.cfg.1')
                sh('sed "s/statsd_host = localhost/statsd_host = statsd-exporter-prometheus-statsd-exporter/g" airflow_conf/airflow.cfg.1 > airflow_conf/airflow.cfg.2')
                sh('sed "s/statsd_port = 8125/statsd_port = 9125/g" airflow_conf/airflow.cfg.2 > airflow_conf/airflow.cfg')
                sh('grep statsd airflow_conf/airflow.cfg')
                sh('cp -p DockerfileAirflow DockerfileAirflow.bak')
                sh('sed "s/crypto,postgres,jdbc/crypto,postgres,jdbc,statsd/g" DockerfileAirflow.bak > DockerfileAirflow')
                sh('docker build -t us.icr.io/map-dev-namespace/airflow:${BUILD_NUMBER} -f DockerfileAirflow .')
                sh('docker images')
                sh('docker push us.icr.io/map-dev-namespace/airflow:${BUILD_NUMBER}')
                sh('ibmcloud cr image-tag us.icr.io/map-dev-namespace/airflow:${BUILD_NUMBER} us.icr.io/map-dev-namespace/airflow:latest')
                sh('ibmcloud cr image-list --restrict map-dev-namespace')
            } //steps
        } //stage
        
         stage('Deploy Airflow image to dev cluster') {
            environment {
                IBMCLOUD_CREDS = credentials('ibm-cloud-cr')
            }

            steps {
                sh('ibmcloud login --apikey ${IBMCLOUD_CREDS_PSW} -r us-south')
                sh('ibmcloud ks cluster config --cluster map-dal10-16x64-01')
                sh('kubectl config current-context')
                sh('kubectl rollout restart deployment airflow-webserver -n airflow')
                sh('kubectl rollout restart deployment airflow-scheduler -n airflow')
            } //steps
         } //stage
         
        stage('Validate Airflow on DEV') {
            steps {
                script {
                    timeout(5) {
                        waitUntil {
                            try {
                                sh('wget -q https://airflow.map-mktsys-dev.limited-use.ibm.com/airflow/login -O /dev/null')
                                return true
                            } 
                            catch (exception) {
                                return false
                            }
                        } //waitUntil
                    } //timeout
                } //script
            } //steps
         } //stage
         
    } //stages
    post {
        always {
            emailext to: 'bbotev@bg.ibm.com', 
                    subject: '${PROJECT_NAME} - Build # ${BUILD_NUMBER} - ${BUILD_STATUS}!',
                    body: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS: Check console output at $BUILD_URL to view the results.'
    
        } //always
    } //post
} //pipeline
