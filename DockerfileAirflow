FROM python:3.7-buster

# Setup airflow
RUN set -ex \
    && apt-get -o Acquire::Check-Valid-Until=false update \
	&& apt-get install -y --no-install-recommends apt-utils \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y --force-yes build-essential freetds-bin krb5-user ldap-utils libffi6 libsasl2-2 libsasl2-modules libssl1.1 locales lsb-release sasl2-bin sqlite3 unixodbc libsasl2-dev python-dev libldap2-dev libssl-dev telnet net-tools nano\
	&& apt-get purge --auto-remove -yqq \
    && apt-get autoremove -yqq --purge \
    && apt-get clean \
    && rm -rf \
        /var/lib/apt/lists/* \
        /tmp/* \
        /var/tmp/* \
        /usr/share/doc \
        /usr/share/doc-base \
	&& pip install pip==20.2.4 \
    && SLUGIFY_USES_TEXT_UNIDECODE=yes pip install --no-cache-dir "apache-airflow[crypto,postgres,jdbc]==2.1.3" --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.1.3/constraints-3.7.txt" psycopg2-binary scp paramiko python-ldap email_validator apache-airflow-providers-cncf-kubernetes apache-airflow-providers-slack

# Install Java
RUN echo "deb http://archive.debian.org/debian/ jessie-backports main" >> /etc/apt/sources.list \
	#### Fix NO PUBKEY ERROR ####
	&& gpg --keyserver keyserver.ubuntu.com --recv-key 8B48AD6246925553 \     
	&& gpg -a --export 8B48AD6246925553 | apt-key add - \
	&& gpg --keyserver keyserver.ubuntu.com --recv-key 7638D0442B90D010 \     
	&& gpg -a --export 7638D0442B90D010 | apt-key add - \
	#####
	&& apt-get -o Acquire::Check-Valid-Until=false update \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y libcups2 \
    && DEBIAN_FRONTEND=noninteractive apt-get install -t jessie-backports --no-install-recommends -y openjdk-8-jre-headless \
    && rm -rf /var/lib/apt/lists/*
	
# Install Git
RUN apt-get -o Acquire::Check-Valid-Until=false update \
	&& DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends git-all

# Install kubectl and ibmcloud CLI
RUN set -ex \
	&& apt-get install -y apt-transport-https ca-certificates curl \
	&& curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg \
	&& echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list \
	&& apt-get -o Acquire::Check-Valid-Until=false update \
	&& apt-get install -y kubectl

# Fix vulnerabilities and configuration issues
RUN set -ex \
    && apt-get install -y --only-upgrade libtiff-dev libtiffxx5 libtiff5
RUN rm -rf /etc/mysql/
RUN rm -rf /etc/apache2/

# Install Supercronic
ENV SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.1.12/supercronic-linux-amd64 \
    SUPERCRONIC=supercronic-linux-amd64 \
    SUPERCRONIC_SHA1SUM=048b95b48b708983effb2e5c935a1ef8483d9e3e
RUN curl -fsSLO "$SUPERCRONIC_URL" \
	&& echo "${SUPERCRONIC_SHA1SUM}  ${SUPERCRONIC}" | sha1sum -c - \
	&& chmod +x "$SUPERCRONIC" \
	&& mv "$SUPERCRONIC" "/usr/local/bin/${SUPERCRONIC}" \
	&& ln -s "/usr/local/bin/${SUPERCRONIC}" /usr/local/bin/supercronic

ARG airflow_home=/opt/airflow

# Setup airflow git path
ARG airflow_git=${airflow_home}/git
RUN mkdir -p ${airflow_git}
	
# Create user and group to run Airflow
ARG air_user=afpuser
ARG air_group=afpgroup
RUN groupadd -g 9999 "${air_group}"
RUN useradd -m -u 9999 -g "${air_group}" "${air_user}" -s /bin/bash

# Copy airflow configuration preset
COPY airflow_conf/airflow.cfg ${airflow_home}/airflow.cfg
COPY airflow_conf/webserver_config.py ${airflow_home}/webserver_config.py

# Copy custom JARs
COPY jars/* ${airflow_home}/jars/

# Copy GIT Webhook Listener
COPY airflow_conf/listen_scheduler_git.py ${airflow_home}/listen_scheduler_git.py
COPY airflow_conf/listen_webserver_git.py ${airflow_home}/listen_webserver_git.py

# https://jsw.ibm.com/browse/MAPDEVOPS-1916
COPY airflow_conf/javacerts.jks ${airflow_home}/javacerts.jks
COPY airflow_conf/digikeystore.jks ${airflow_home}/digikeystore.jks

# Copy cron job to clean logs
COPY airflow_conf/afpuser ${airflow_home}/afpuser

COPY entrypoint.sh /entrypoint.sh

# Set permissions to allow entrypoint to work as AFPUSER user
RUN chown -R ${air_user}:${air_group} ${airflow_home}
RUN chmod -R 774 ${airflow_home}
RUN chown -R ${air_user}:${air_group} /home/afpuser
RUN chmod -R 774 /home/afpuser
RUN chown ${air_user}:${air_group} /entrypoint.sh
RUN chmod 774 /entrypoint.sh

USER ${air_user}

ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64

# https://jsw.ibm.com/browse/MAPDEVOPS-302
ENV CLASSPATH=/opt/airflow/jars/nzjdbc.jar:/opt/airflow/jars/db2jcc4.jar

ENV AIR_USER=${air_user}
ENV AIR_GROUP=${air_group}
ENV AIRFLOW_HOME=${airflow_home}
ENV AIRFLOW_DAG=${airflow_home}/dags
ENV AIRFLOW_GIT=${airflow_git}

ENTRYPOINT ["/entrypoint.sh"]
